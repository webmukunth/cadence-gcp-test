plugins {
    id 'base'
    id 'idea'
    id 'com.gradle.build-scan' version '2.3'
    id 'net.ltgt.errorprone' version '0.8.1' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'org.springframework.boot' version '2.1.7.RELEASE' apply false
    id 'com.google.cloud.tools.jib' version '1.4.0' apply false
}

ext {
    springBootVersion = '2.1.7.RELEASE'
    javaSpringJaegerVersion = '2.0.0'
    uberCadenceClientVersion = '2.5.2'
    guavaVersion = '28.0-jre'
    errorProneVersion = 'latest.release'
    imageRepo = 'gcr.io/phonomania-fd0bb0'
}

/* Common configuration for all sub projects */
subprojects {
    group = 'com.anz.bs.magneto'

    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/libs-release' }
        mavenLocal()
    }

    def commonCompilerArgs =
            ['-Xlint:serial', '-Xlint:cast', '-Xlint:classfile', '-Xlint:dep-ann',
             '-Xlint:divzero', '-Xlint:empty', '-Xlint:finally', '-Xlint:overrides',
             '-Xlint:path', '-Xlint:-processing', '-Xlint:static', '-Xlint:try', '-Xlint:-options']

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ['-Xlint:varargs', '-Xlint:fallthrough', '-Xlint:-rawtypes',
             '-Xlint:deprecation', '-Xlint:unchecked', '-Werror']

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ['-Xlint:-varargs', '-Xlint:-fallthrough', '-Xlint:-deprecation', '-Xlint:-unchecked']

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.errorprone {
            enabled = true
            disableWarningsInGeneratedCode = true
        }
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs += '-parameters'
    }

    dependencies {
        constraints {
            implementation "com.google.guava:guava:${guavaVersion}"
            implementation "io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:${javaSpringJaegerVersion}"
            implementation "com.uber.cadence:cadence-client:${uberCadenceClientVersion}"
            errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"
        }
    }

    dependencies {
        implementation "joda-time:joda-time"
        implementation "com.google.guava:guava"
        implementation "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        errorprone "com.google.errorprone:error_prone_core"
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}


/* All subprojects other than api are spring boot projects */
configure(subprojects.findAll { !it.name.endsWith('api') }) {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.google.cloud.tools.jib'

    dependencies {
        api project(':commons-api')

        /* Spring Boot */
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        /* jackson json */
        implementation 'org.springframework.boot:spring-boot-starter-json'
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda"

        /* Observability stack */
        implementation "io.micrometer:micrometer-registry-prometheus"
        implementation "io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter"
    }

    processResources {
        expand(['projectName': project.name, 'version': version])
    }

    jib {
        from {
            image = 'gcr.io/distroless/java:11'
        }
        to {
            imageRepo += (
                    imageRepo != ''
                    && imageRepo.lastIndexOf('/') < (imageRepo.length() - 1)
                ) ? '/' : ''
            image = "${imageRepo}magneto/${project.name}:${version}"
            credHelper = 'gcr'
        }
    }
}
