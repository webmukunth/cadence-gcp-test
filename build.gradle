plugins {
    id 'base'
    id 'idea'
    id 'com.gradle.build-scan' version '2.3'
    id 'net.ltgt.errorprone' version '0.8.1' apply false
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'org.springframework.boot' version '2.2.0.M6' apply false
    id 'com.google.cloud.tools.jib' version '1.5.0' apply false
}

ext {
    springBootVersion = '2.2.0.M6'
    javaSpringJaegerVersion = '2.0.3'
    uberCadenceClientVersion = '2.6.0'
    guavaVersion = '28.0-jre'
    errorProneVersion = '2.3.3'
    reactorKafkaVersion = '1.1.1.RELEASE'
    imageRepo = 'gcr.io/phonomania-fd0bb0'
}

/* Common configuration for all sub projects */
subprojects {
    group = 'com.anz.bs.magneto'

    apply plugin: 'java-library'
    apply plugin: 'maven'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/libs-release' }
        mavenLocal()
    }

    def commonCompilerArgs =
            ['-Xlint:serial', '-Xlint:cast', '-Xlint:classfile', '-Xlint:dep-ann',
             '-Xlint:divzero', '-Xlint:empty', '-Xlint:finally', '-Xlint:overrides',
             '-Xlint:path', '-Xlint:-processing', '-Xlint:static', '-Xlint:try', '-Xlint:-options']

    compileJava.options*.compilerArgs = commonCompilerArgs +
            ['-Xlint:varargs', '-Xlint:fallthrough', '-Xlint:-rawtypes',
             '-Xlint:deprecation', '-Xlint:unchecked', '-Werror']

    compileTestJava.options*.compilerArgs = commonCompilerArgs +
            ['-Xlint:-varargs', '-Xlint:-fallthrough', '-Xlint:-deprecation', '-Xlint:-unchecked']

    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.errorprone {
            enabled = true
            disableWarningsInGeneratedCode = true
            /* Bug in error prone
             * https://github.com/google/error-prone/issues/1321
             * https://github.com/google/error-prone/issues/780
             */
            disable("UnusedVariable")
            disable("ReferenceEquality")
            disable("FallThrough")
        }
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs += '-parameters'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        constraints {
            implementation "com.google.guava:guava:${guavaVersion}"
            implementation "io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:${javaSpringJaegerVersion}"
            implementation "com.uber.cadence:cadence-client:${uberCadenceClientVersion}"
            implementation "io.projectreactor.kafka:reactor-kafka:${reactorKafkaVersion}"
            errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"
            testImplementation "org.mockito:mockito-all:1.10.19"
            testImplementation "org.powermock:powermock-api-mockito:1.7.4"
        }
    }

    dependencies {
        implementation 'joda-time:joda-time'
        implementation 'com.google.guava:guava'
        implementation 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        errorprone 'com.google.errorprone:error_prone_core'

        testImplementation 'junit:junit'
        testImplementation 'org.mockito:mockito-all'
        testImplementation 'org.powermock:powermock-api-mockito'
        testImplementation 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    test {
        useJUnitPlatform()
    }
}


/* All subprojects ends with web or client */
configure(subprojects.findAll { it.name.endsWithAny('web', 'client') }) {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.google.cloud.tools.jib'

    dependencies {
        api project(':commons-api')

        /* Spring Boot */
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        /* Observability stack */
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation('io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter') {
            /* Not compatible with latest SB version */
            exclude group: 'io.opentracing.contrib', module: 'opentracing-spring-cloud-mongo-starter'
        }

        /* jackson json */
        implementation 'org.springframework.boot:spring-boot-starter-json'
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda"

        /* Data */
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

        /* Cache */
        implementation 'org.springframework.boot:spring-boot-starter-cache'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        /* cadence workflow */
        implementation "com.uber.cadence:cadence-client"

        /* Kafka */
        implementation 'io.projectreactor.kafka:reactor-kafka'
        implementation 'org.springframework.kafka:spring-kafka'
    }


    processResources {
        expand(['projectName': project.name, 'version': version])
    }

    jib {
        from {
            image = 'gcr.io/distroless/java:11'
        }
        to {
            /* Append '/' to imageRepo if required */
            imageRepo += (imageRepo != '' && imageRepo.lastIndexOf('/') < (imageRepo.length() - 1)) ? '/' : ''

            image = "${imageRepo}magneto/${project.name}:${version}"
            credHelper = 'gcr'
        }
    }
}


